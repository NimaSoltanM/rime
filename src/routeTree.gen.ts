/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as TestRouteImport } from './routes/test'
import { Route as MessagingRouteImport } from './routes/messaging'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as AuthRouteImport } from './routes/auth'
import { Route as IndexRouteImport } from './routes/index'

const TestRoute = TestRouteImport.update({
  id: '/test',
  path: '/test',
  getParentRoute: () => rootRouteImport,
} as any)
const MessagingRoute = MessagingRouteImport.update({
  id: '/messaging',
  path: '/messaging',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRoute
  '/messaging': typeof MessagingRoute
  '/test': typeof TestRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRoute
  '/messaging': typeof MessagingRoute
  '/test': typeof TestRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/auth': typeof AuthRoute
  '/dashboard': typeof DashboardRoute
  '/messaging': typeof MessagingRoute
  '/test': typeof TestRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/auth' | '/dashboard' | '/messaging' | '/test'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/auth' | '/dashboard' | '/messaging' | '/test'
  id: '__root__' | '/' | '/auth' | '/dashboard' | '/messaging' | '/test'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRoute
  DashboardRoute: typeof DashboardRoute
  MessagingRoute: typeof MessagingRoute
  TestRoute: typeof TestRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/test': {
      id: '/test'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof TestRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/messaging': {
      id: '/messaging'
      path: '/messaging'
      fullPath: '/messaging'
      preLoaderRoute: typeof MessagingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRoute,
  DashboardRoute: DashboardRoute,
  MessagingRoute: MessagingRoute,
  TestRoute: TestRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
